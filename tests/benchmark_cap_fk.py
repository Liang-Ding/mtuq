
import os
import sys
import numpy as np

from os.path import basename, join
from mtuq.dataset import sac
from mtuq.greens_tensor import fk
from mtuq.grid_search import DoubleCoupleGridRandom
from mtuq.grid_search import grid_search_serial
from mtuq.misfit.cap import Misfit
from mtuq.process_data.cap import ProcessData
from mtuq.util.cap_util import trapezoid_rise_time, Trapezoid
from mtuq.util.plot import plot_beachball, plot_waveforms
from mtuq.util.util import cross, root



if __name__=='__main__':
    #
    # Given four "fundamental" moment tensor, generates MTUQ synthetics and
    # compares with corresponding CAP/FK synthetics
    #
    # This script is similar to examples/GridSearch.DoubleCouple3.Serial.py,
    # except here we consider only four grid points rather than an entire
    # grid, and here the final plots are a comparison of MTUQ and CAP/FK 
    # synthetics rather than a comparison of data and synthetics
    #
    # The CAP/FK synthetics used for the comparison were generated by the 
    # following commands
    #

    # explosion source:
    # cap.pl -H0.02 -P1/15/60 -p1 -S2/10/0 -T15/150 -D1/1/0.5 -C0.1/0.333/0.025/0.0625 -Y1 -Zweight_test.dat -Mscak_34 -m4.5 -I1 -R0/1.178/90/0.707/90 20090407201255351

    # double-couple source #1:
    # cap.pl -H0.02 -P1/15/60 -p1 -S2/10/0 -T15/150 -D1/1/0.5 -C0.1/0.333/0.025/0.0625 -Y1 -Zweight_test.dat -Mscak_34 -m4.5 -I1 -R0/0/90/0/90 20090407201255351

    # double-couple source #2:
    # cap.pl -H0.02 -P1/15/60 -p1 -S2/10/0 -T15/150 -D1/1/0.5 -C0.1/0.333/0.025/0.0625 -Y1 -Zweight_test.dat -Mscak_34 -m4.5 -I1 -R0/0/90/1/0 20090407201255351

    # double-couple source #3:
    # cap.pl -H0.02 -P1/15/60 -p1 -S2/10/0 -T15/150 -D1/1/0.5 -C0.1/0.333/0.025/0.0625 -Y1 -Zweight_test.dat -Mscak_34 -m4.5 -I1 -R0/0/0/0/180 2009040720125535


    path_ref = []
    path_ref += '/home/rmodrak/projects/mtuq/OUTPUT_DIR0'
    path_ref += '/home/rmodrak/projects/mtuq/OUTPUT_DIR1'
    path_ref += '/home/rmodrak/projects/mtuq/OUTPUT_DIR2'
    path_ref += '/home/rmodrak/projects/mtuq/OUTPUT_DIR3'

    path_data=    join(root(), 'data/examples/20090407201255351')
    path_weights= join(root(), 'data/examples/20090407201255351/weights.dat')
    # Fow now this path exists only in my personal environment.  Eventually, 
    # we need to include it in the repository or make it available for download
    path_greens=  join(os.getenv('CENTER1'), 'data/wf/FK_SYNTHETICS/scak')
    event_name = '20090407201255351'


    process_bw = ProcessData(
        filter_type='Bandpass',
        freq_min= 0.1,
        freq_max= 0.333,
        pick_type='from_fk_database',
        fk_database=path_greens,
        window_type='cap_bw',
        window_length=15.,
        padding_length=0,
        weight_type='cap_bw',
        cap_weight_file=path_weights,
        )

    process_sw = ProcessData(
        filter_type='Bandpass',
        freq_min=0.025,
        freq_max=0.0625,
        pick_type='from_fk_database',
        fk_database=path_greens,
        window_type='cap_sw',
        window_length=150.,
        padding_length=0,
        weight_type='cap_sw',
        cap_weight_file=path_weights,
        )

    process_data = {
       'body_waves': process_bw,
       'surface_waves': process_sw,
       }


    misfit_bw = Misfit(
        time_shift_max=0.,
        time_shift_groups=['ZR'],
        )

    misfit_sw = Misfit(
        time_shift_max=0.,
        time_shift_groups=['ZR','T'],
        )

    misfit = {
        'body_waves': misfit_bw,
        'surface_waves': misfit_sw,
        }


    #
    # Next we specify the source parameter grid
    #

    grid = [
       # Mrr, Mtt, Mpp, Mrt, Mrp, Mtp
       np.array([1., 1., 1., 0., 0., 0.]), # explosion
       np.array([0., 0., 0., 1., 0., 0.])  # double-couple #1
       np.array([0., 0., 0., 0., 1., 0.])  # double-couple #2
       np.array([0., 0., 0., 0., 0., 1.])  # double-couple #2
       ]

    rise_time = trapezoid_rise_time(Mw=4.5)
    wavelet = Trapezoid(rise_time)


    #
    # The benchmark starts now
    #

    print 'Reading data...\n'
    data = sac.reader(path_data, wildcard='*.[zrt]')
    data.add_tag('velocity')
    data.sort_by_distance()

    stations  = []
    for stream in data:
        stations += [stream.meta]
    origin = data.get_origin()


    print 'Processing data...\n'
    processed_data = {}
    for key in ['body_waves', 'surface_waves']:
        processed_data[key] = data.map(process_data[key])
    data = processed_data


    print 'Reading Greens functions...\n'
    factory = syngine.GreensTensorFactory('ak135f_5s')
    greens = factory(stations, origin)

    print 'Processing Greens functions...\n'
    greens.convolve(wavelet)
    processed_greens = {}
    for key in ['body_waves', 'surface_waves']:
        processed_greens[key] = greens.map(process_data[key])
    greens = processed_greens

    print 'Plotting waveforms...'
    from copy import deepcopy
    from mtuq.util.cap_util import get_synthetics_cap, get_synthetics_mtuq
    from mtuq.util.cap_util import get_data_cap

    for _i, mt in enumerate(grid):
        print ' %d of %d' % (_i+1, grid.size+1)
        synthetics_cap = get_synthetics_cap(deepcopy(data), path_ref[_i])
        synthetics_mtuq = get_synthetics_mtuq(greens, mt)
        filename = 'cap_fk_'+str(_i)+'.png'
        plot_waveforms(filename, synthetics_cap, synthetics_mtuq)

    print ' %d of %d' % (_i+2, grid.size+1)
    data_mtuq = data
    data_cap = get_data_cap(deepcopy(data), path_ref[0])
    filename = 'cap_fk_data.png'
    plot_waveforms(filename, data_cap, data_mtuq, normalize=False)


