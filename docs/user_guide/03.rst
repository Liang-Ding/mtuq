
Acquiring Green's functions
===========================

The response of a medium to an impulsive source is called a Green's function.  This page explains how Green's functions are used in source inversions.   It describes the types of Green's functions supported by MTUQ and how these types can be obtained.


Role of Green's functions
-------------------------

As the response of a medium to a simple impulsive source, Green's functions can be combined to obtain synthetics from more complex sources.

Green's functions are useful because they provide computaional savings.  It's almost always cheaper to work with precomputed Green's functions than to perform on-the-fly wavefield simulations.


`GreensTensor` objects
----------------------

In MTUQ, `GreensTensor <https://uafgeotools.github.io/mtuq/library/generated/mtuq.GreensTensor.html>`_ objects provide access to the full set of Green's functions needed to describe the medium response between a given station and origin.  In particular, the `get_synthetics` method accepts a `MomentTensor` and returns a set of traces representing the response at the given station.

The following sections describe how Green's functions from external solvers can be downloaded or computed and used to generate `GreensTensor` objects.




Downloading precomputed Green's functions
-----------------------------------------

One of the easiest ways to acquire Green's functions is to download them using `syngine <http://ds.iris.edu/ds/products/syngine/>`_, a webservice that hosts Green's functions from the following 1D Earth models: PREM, AK135, and iasp91.

To download AK135 Green's functions and generate MTUQ `GreenTensor` objects:

.. code ::

   from mtuq import download_greens_functions
   greens_tensors = download_greens_functions(model="ak135f_2s")

One limitation of syngine is that Green's functions are available from only a handful of Earth models.  Another limitation is that syngine only provides responses at specific stations, not over the whole Earth.  If these affect your use case, an alternative is to compute your own Green's functions, as described below.




Computing Green's functions from 1D Earth models
------------------------------------------------

MTUQ currently supports the following 1D Green's functions formats: AxiSEM (preferred) and FK.

`AxiSEM <https://github.com/geodynamics/axisem>`_ simulates wave propagation in radially-symmeric Earth models using a spectral-element method.  To generate synthetics in a format MTUQ natively supports, follow the instructions for in the `AxiSEM user manual <https://geodynamics.org/cig/software/axisem/axisem-manual.pdf>`_  under "Output wavefields in NetCDF formated needed by instaseis."  AxiSEM NetCDF files can be used to retrieve vertical, radial, and transverse  displacement in units of m*(N-m)^-1.

To open an AxiSEM database client in MTUQ:

.. code ::

   from mtuq import open_db
   db = open_db(path_to_NetCDF_file, format="AxiSEM")


`FK <https://www.eas.slu.edu/People/LZhu/home.html>`_ simulates wave propagation in horizontally-layered elastic media using a frequency-wavenumber method.   FK  simulations create SAC files in a directory tree organized by model, event depth, and event distance.  Each SAC file represents a vertical, radial, or transverse velocity time series in units of 10^-20*cm*(dyne-cm)^-1 s^-1.


To open an FK database client in MTUQ:

.. code ::

   from mtuq import open_db
   db = open_db(path_to_FK_directory_tree, format="FK")



Once opened, an AxiSEM or FK database client can be used to generate `GreensTensor <https://uafgeotools.github.io/mtuq/library/generated/mtuq.GreensTensor.html>`_ objects as follows:

.. code::

   greens_tensors = db.get_greens_tensors(stations, origin)





Computing Green's functions from 3D Earth models
------------------------------------------------

MTUQ currently supports 3D Green's functions from SPECFEM3D.  

To generate a complete Green's function database for a given hypocenter and depth, 6 SPECFEM3D wavefield simulations are required.  Output must be saved as SAC files at individual stations using the following filename convention, which comes from `GRD_CMT3D <https://github.com/UTCompSeismo/GRD_CMT3D/tree/master/cmt3d>`_.  Place all SAC files corresponding to a single hypocenter and depth in the same directory as follows:

.. code ::

  {basedir}/{event_id}/
      {net}.{sta}.{loc}.Z.Mrr.sac
      {net}.{sta}.{loc}.Z.Mtt.sac
      {net}.{sta}.{loc}.Z.Mpp.sac
      {net}.{sta}.{loc}.Z.Mrt.sac
      {net}.{sta}.{loc}.Z.Mrp.sac
      {net}.{sta}.{loc}.Z.Mtp.sac
      {net}.{sta}.{loc}.R.Mrr.sac
      {net}.{sta}.{loc}.R.Mtt.sac
      {net}.{sta}.{loc}.R.Mpp.sac
      {net}.{sta}.{loc}.R.Mrt.sac
      {net}.{sta}.{loc}.R.Mrp.sac
      {net}.{sta}.{loc}.R.Mtp.sac
      {net}.{sta}.{loc}.T.Mrr.sac
      {net}.{sta}.{loc}.T.Mtt.sac
      {net}.{sta}.{loc}.T.Mpp.sac
      {net}.{sta}.{loc}.T.Mrt.sac
      {net}.{sta}.{loc}.T.Mrp.sac
      {net}.{sta}.{loc}.T.Mtp.sac


To open an SPECFEM3D database client in MTUQ:

.. code ::

   from mtuq import open_db
   db = open_db(path_SPECFEM3D_output_directory, format="SPECFEM3D")


Once opened, a SPECFEM3D database client can be used to generate `GreensTensor <https://uafgeotools.github.io/mtuq/library/generated/mtuq.GreensTensor.html>`_ objects as follows:

.. code::

   greens_tensors = db.get_greens_tensors(stations, origin)



Green's function conventions
----------------------------

A variety of Green's function conventions exist.  Figuring out which are used in a particular application can be challenging because it depends on

- the type of medium under consideration (for example, acoustic media require fewer independent Green's functions than elastic media)

- the choice of local Cartesian basis conventions (for example, some authors employ "Up-South-East", others "North-East-Down"; see `ObsPy documentation <https://docs.obspy.org/packages/autogen/obspy.imaging.mopad_wrapper.beach.html#supported-basis-systems>`_ for more information)

One of the major design goals of MTUQ is to avoid exposing users to basis convention complexity. MTUQ accomplishes this by understanding external formats and converting to a common internal format that works for both one-dimensional and three-dimensional media. For local Cartesian representations, MTUQ consistently uses an 'Up-South-East' convention.


